package com.restaurant;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class RestaurantDatabase {
    private static final String URL = "jdbc:postgresql://localhost:5432/restaurant_db";
    private static final String USER = "your_db_username";
    private static final String PASSWORD = "your_db_password";

    // Установить подключение к базе данных
    private static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }

    // Получить все элементы меню из базы данных
    public static List<MenuItem> getMenuItems() {
        List<MenuItem> menuItems = new ArrayList<>();
        String query = "SELECT * FROM MenuItem";
        try (Connection connection = getConnection();
             Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(query)) {
            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String name = resultSet.getString("name");
                double price = resultSet.getDouble("price");
                String category = resultSet.getString("category");
                menuItems.add(new MenuItem(id, name, price, category));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return menuItems;
    }

    // Добавить новый элемент меню в базу данных
    public static void addMenuItem(MenuItem menuItem) {
        String query = "INSERT INTO MenuItem (name, price, category) VALUES (?, ?, ?)";
        try (Connection connection = getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, menuItem.getName());
            statement.setDouble(2, menuItem.getPrice());
            statement.setString(3, menuItem.getCategory());
            statement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Создать заказ в базе данных
    public static void createOrder(Order order) {
        String query = "INSERT INTO \"Order\" (customerName) VALUES (?)";
        try (Connection connection = getConnection();
             PreparedStatement statement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
            statement.setString(1, order.getCustomerName());
            statement.executeUpdate();
            
            try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    int orderId = generatedKeys.getInt(1);
                    for (MenuItem item : order.getItems()) {
                        addOrderItem(orderId, item);  // Добавляем элементы заказа
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Добавить элемент заказа в базу данных
    private static void addOrderItem(int orderId, MenuItem item) {
        String query = "INSERT INTO OrderItem (orderId, menuItemId, quantity) VALUES (?, ?, ?)";
        try (Connection connection = getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setInt(1, orderId);
            statement.setInt(2, item.getId());
            statement.setInt(3, 1);  // Пример с количеством 1
            statement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Получить все заказы из базы данных
    public static List<Order> getOrders() {
        List<Order> orders = new ArrayList<>();
        String query = "SELECT * FROM \"Order\"";
        try (Connection connection = getConnection();
             Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(query)) {
            while (resultSet.next()) {
                int orderId = resultSet.getInt("orderId");
                String customerName = resultSet.getString("customerName");
                orders.add(new Order(orderId, customerName, new MenuItem[]{}));  // Нужно будет доработать для элементов заказа
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return orders;
    }
}
